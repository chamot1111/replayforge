"use strict";(self.webpackChunkreplayforge=self.webpackChunkreplayforge||[]).push([[7706],{1939:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var t=s(4848),o=s(8453);const a={sidebar_position:1},r="Uptime Kuma Monitor Postgres Values",i={id:"use-case/uptime-kuma-monitor-postgres-values",title:"Uptime Kuma Monitor Postgres Values",description:"Kuma Monitor is a nice health monitoring and status page generator, the following examples show how to use postgres source to call status into sqlite sink let kuma display in dashboards.",source:"@site/docs/use-case/uptime-kuma-monitor-postgres-values.md",sourceDirName:"use-case",slug:"/use-case/uptime-kuma-monitor-postgres-values",permalink:"/replayforge/docs/use-case/uptime-kuma-monitor-postgres-values",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/use-case/uptime-kuma-monitor-postgres-values.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Discord Notification on No Message",permalink:"/replayforge/docs/use-case/discord-notification-on-no-message"},next:{title:"Use cases",permalink:"/replayforge/docs/category/use-cases"}},c={},l=[{value:"Basic Kuma Monitor Source -&gt; Sink",id:"basic-kuma-monitor-source---sink",level:2},{value:"pg call source example",id:"pg-call-source-example",level:3},{value:"sqlite sink example",id:"sqlite-sink-example",level:3}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"uptime-kuma-monitor-postgres-values",children:"Uptime Kuma Monitor Postgres Values"})}),"\n",(0,t.jsx)(n.p,{children:"Kuma Monitor is a nice health monitoring and status page generator, the following examples show how to use postgres source to call status into sqlite sink let kuma display in dashboards."}),"\n",(0,t.jsx)(n.h2,{id:"basic-kuma-monitor-source---sink",children:"Basic Kuma Monitor Source -> Sink"}),"\n",(0,t.jsx)(n.h3,{id:"pg-call-source-example",children:"pg call source example"}),"\n",(0,t.jsx)(n.p,{children:"proxy.json:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "sources": [\n    {\n      "id": "appli1",\n      "type": "pgcall",\n      "params": {\n        "intervalSeconds": 60,\n        "host": "$PGM_DB_HOST_APPLI1_API",\n        "port": "$PGM_DB_PORT_APPLI1_API",\n        "database": "$PGM_DB_DATABASE_APPLI1_API",\n        "user": "$PGM_DB_USER_APPLI1_API",\n        "password": "$PGM_DB_PASSWORD_APPLI1_API",\n        "calls": [\n          {\n            "name": "appli1_ping",\n            "sql": "SELECT monitoring.ping()"\n          },\n          {\n            "name": "appli1_connections",\n            "sql": "SELECT monitoring.connections_since_5_minutes()"\n          }\n        ]\n      },\n      "targetSink": "monitoring_sink",\n      "hookInterval": 60000\n    }\n  ],\n  "sinks": [\n    {\n      "id": "monitoring_sink",\n      "type": "http",\n      "url": "http://relay-forwarder:8100/",\n      "buckets": ["monitoring"],\n      "authBearer": "$RELAY_SECRET"\n    }\n  ],\n  "portStatusZ": 8000,\n  "envName": "monitoring"\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"sqlite-sink-example",children:"sqlite sink example"}),"\n",(0,t.jsx)(n.p,{children:"player.json:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "relayUrl": "http://relay-forwarder:8100/",\n  "sources": [\n    {\n      "name": "monitoring",\n      "relayAuthenticationBearer": "$RELAY_SECRET",\n      "transformScript": "./convert-monitoring.lua"\n    }\n  ],\n  "sinks": [\n    {\n      "name": "status",\n      "type": "db",\n      "id": "status",\n      "params": {\n        "database": "./status.sqlite3",\n        "listen_port": "8300",\n        "static_dir": "./static"\n      }\n    }\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"convert-monitoring.lua"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"function Process(content, emit)\n    local data = json_decode(content)\n    local body = data['body']\n\n    -- Parse the body string into a table\n    local body_data = json_decode(body)\n\n    -- Iterate through each key in the body\n    for key, value in pairs(body_data) do\n        -- Create new body format for each key\n        local new_body = {\n            id = key,\n            success = value.success,\n            data = json_encode(value.data)  -- Convert data array back to string\n        }\n\n        -- Create the wrapped object\n        local wrapped = json_encode({\n            body = json_encode(new_body),\n            path = \"/status\",\n            method = \"POST\"\n        })\n\n        -- Emit an event for this key\n        emit('status', wrapped)\n    end\nend\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>i});var t=s(6540);const o={},a=t.createContext(o);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);