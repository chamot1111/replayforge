"use strict";(self.webpackChunkreplayforge=self.webpackChunkreplayforge||[]).push([[5393],{5496:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>d,toc:()=>l});var s=t(4848),a=t(8453);const o={sidebar_position:4},r="Send Logs to Datadog",d={id:"use-case/logs-to-datadog",title:"Send Logs to Datadog",description:"The player can be configured to read logs from Pebble using the loki protocol, filter specific data, and forward it to Datadog. Here's how you can accomplish this using a custom transform script with the sink handler.",source:"@site/docs/use-case/logs-to-datadog.md",sourceDirName:"use-case",slug:"/use-case/logs-to-datadog",permalink:"/replayforge/docs/use-case/logs-to-datadog",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/use-case/logs-to-datadog.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Nginx Access File Parse",permalink:"/replayforge/docs/use-case/nginx-access-file-parse"},next:{title:"Advanced",permalink:"/replayforge/docs/category/advanced"}},i={},l=[];function c(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"send-logs-to-datadog",children:"Send Logs to Datadog"})}),"\n",(0,s.jsx)(n.p,{children:"The player can be configured to read logs from Pebble using the loki protocol, filter specific data, and forward it to Datadog. Here's how you can accomplish this using a custom transform script with the sink handler."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="pebble.yaml"',children:"log-targets:\n  production-logs:\n    override: merge\n    type: loki\n    location: http://localhost:9011/loki/api/v1/push\n    services: [srv1, srv2]\n\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="player.json"',children:'{\n  "tsnetHostname": "api-rpf-${ENV_NAME}",\n  "sources": [\n    {\n      "id": "pebble_loki",\n      "type": "http",\n      "params": {\n        "listenPort": 9011\n      },\n      "transformScript": "./loki.lua",\n      "hookInterval": 1000\n    }\n  ],\n  "sinks": [\n    {\n      "id": "pebble_loki_sink",\n      "type": "http",\n      "url": "https://http-intake.logs.datadoghq.com/",\n      "buckets": ["pebble_loki_${ENV_TYPE}"],\n      "transformScript": "./log_to_data_dog.lua",\n      "config": {\n        "maxPayloadBytes": 5000000,\n\t      "batchMaxEvents": 1000,\n\t\t\t\t"batchTimeoutSecs": 5,\n\t\t\t\t"batchGoalBytes": 4250000\n      }\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",metastring:'title="loki.lua"',children:'env_name = os.getenv("ENV_NAME")\n\nfunction parse_loki_event(content)\n    local parsed_content = json_decode(content)\n    local body_str = parsed_content["body"]\n    local streams = json_decode(body_str)["streams"]\n\n    local parsed_streams = {}\n    for _, stream in ipairs(streams) do\n        local stream_info = stream["stream"]\n        local values = stream["values"]\n\n        local parsed_values = {}\n        for _, value_tuple in pairs(values) do\n            table.insert(parsed_values, {\n                timestamp = value_tuple[1],\n                content = value_tuple[2]\n            })\n        end\n\n        table.insert(parsed_streams, {\n            stream = stream_info,\n            values = parsed_values\n        })\n    end\n\n    return parsed_streams, parsed_content\nend\n\nfunction Process(content, emit)\n    local parsed_streams, parsed_content = parse_loki_event(content)\n\n    for _, stream in ipairs(parsed_streams) do\n        service = stream.stream["pebble_service"]\n\n        for _, value in ipairs(stream.values) do\n            event = {\n                body = json_encode({\n                    timestamp = value.timestamp,\n                    content = value.content,\n                    service = service,\n                    env_name = env_name\n                })\n            }\n            for key, value in pairs(parsed_content) do\n                if key ~= "body" then\n                    event[key] = value\n                end\n            end\n\n            emit("pebble_loki_sink", json_encode(event))\n        end\n    end\nend\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",metastring:'title="log_to_data_dog.lua"',children:'service_name = os.getenv("DD_SERVICE")\ndd_api_key = os.getenv("DD_API_KEY")\ndd_application_key = os.getenv("DD_APPLICATION_KEY")\n\nfunction TransformBatch(messages, request)\n    local dd_messages = {}\n    for i, message in ipairs(messages) do\n        local decoded = json_decode(message)\n        local body = json_decode(decoded.body)\n\n        local dd_message = {\n            ddsource = body.stream,\n            ddtags = "",\n            hostname = "replayforge",\n            message = body.content,\n            service = service_name\n        }\n        table.insert(dd_messages, json_encode(dd_message))\n    end\n\n    request.path = "/api/v2/logs"\n    request.headers = {\n        ["Content-Type"] = "application/json",\n        ["DD-API-KEY"] = dd_api_key,\n        ["DD-APPLICATION-KEY"] = dd_application_key\n    }\n\n    return dd_messages, request\nend\n'})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var s=t(6540);const a={},o=s.createContext(a);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);